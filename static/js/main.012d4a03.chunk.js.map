{"version":3,"sources":["Components/Character.jsx","Services/Requester.js","Controllers/characters.js","Screens/ListCharacters.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["Character","info","style","padding","position","float","right","top","zIndex","backgroundColor","status","color","src","img","alt","nickname","justifySelf","height","width","objectFit","left","bottom","textAlign","name","birthday","occupation","join","requester","baseUrl","this","params","filter","Object","keys","reduce","key","index","symbol","endpoint","serviceUrl","fetch","method","then","response","a","ok","json","data","catch","error","Error","statusText","getCharacters","setParams","get","ListCharacters","useState","characters","limit","offset","search","loading","state","setState","updateCharacters","innerState","useEffect","type","value","onChange","event","target","display","gridTemplateColumns","gridAutoRows","character","toLowerCase","includes","map","char_id","clear","onClick","previousOffset","nextOffset","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kOAgDeA,EA9CG,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OAChB,yBAAKC,MAAO,CAAEC,QAAS,KAAMC,SAAU,aACrC,yBAAKF,MAAO,CACVG,MAAO,QACPD,SAAU,WACVE,MAAO,KACPC,IAAK,KACLC,OAAQ,KACRC,gBAAiC,UAAhBR,EAAKS,OAAqB,QAAU,MACrDP,QAAS,MACTQ,MAAO,UAGNV,EAAKS,QAER,yBACEE,IAAKX,EAAKY,IACVC,IAAG,iBAAYb,EAAKc,UACpBb,MAAO,CACLc,YAAa,SACbC,OAAQ,OACRC,MAAO,OACPC,UAAW,WAGf,yBAAKjB,MAAO,CACVG,MAAO,OACPD,SAAU,WACVgB,KAAM,MACNC,OAAQ,KACRb,OAAQ,KACRC,gBAAiB,cACjBE,MAAO,QACPW,UAAW,SAGX,4BAAKrB,EAAKsB,MACV,2BACE,wCACCtB,EAAKuB,UAER,2BAAIvB,EAAKwB,WAAWC,KAAK,U,qCCflBC,EAAY,I,WA3BvB,WAAYC,GAAU,oBACpBC,KAAKD,QAAUA,EACfC,KAAKC,OAAS,G,sDAGNC,GACRF,KAAKC,OAASE,OAAOC,KAAKF,GAAQG,OAAO,SAACJ,EAAQK,EAAKC,GACrD,IAAMC,EAAmB,IAAVD,EAAc,IAAM,IACnC,MAAM,GAAN,OAAUN,GAAV,OAAmBO,GAAnB,OAA4BF,EAA5B,YAAmCJ,EAAOI,KACzC,M,0BAGDG,GACF,IAAMC,EAAU,UAAMV,KAAKD,SAAX,OAAqBU,GAArB,OAAgCT,KAAKC,QAErD,OAAOU,MAAMD,EADS,CAAEE,OAAQ,QAE7BC,KADI,sCACC,WAAOC,GAAP,SAAAC,EAAA,yDACAD,EAASE,GADT,yCAEKF,EAASG,OACbJ,KAAK,SAACK,GAAD,MAAU,CAAC,KAAMA,KACtBC,MAAM,SAACC,GAAD,MAAW,CAACA,MAJnB,gCAMG,CAAC,IAAIC,MAAMP,EAASQ,cANvB,yCADD,2D,KAYc,CAAc,uCCxB1BC,EAAa,sCAAG,gDAAAR,EAAA,4DAAOb,EAAP,+BAAgB,GAC3CJ,EAAU0B,UAAUtB,GADO,SAECJ,EAAU2B,IAJvB,cAEY,sCAEpBL,EAFoB,KAEbF,EAFa,MAGvBE,EAHuB,0CAIlB,IAJkB,iCAMpBF,GANoB,0CAAH,qD,mjBCA1B,IAuEeQ,EAvEQ,WAAO,IAAD,EACDC,mBAAS,CACjCC,WAAY,GACZC,MAAO,EACPC,OAAQ,EACRC,OAAQ,GACRC,SAAS,IANgB,mBACpBC,EADoB,KACbC,EADa,KASrBC,EAAmB,SAACP,GACxBM,EAAS,SAACE,GAAD,YAAsBA,EAAtB,CAAkCR,aAAYI,SAAS,OAGlEK,oBAAU,WAERd,EADsB,CAAEM,MAAO,EAAGC,OAAQ,IACbjB,KAAKsB,IACjC,IAEHE,oBAAU,WACR,IAAMnC,EAAS,CAAE2B,MAAOI,EAAMJ,MAAOC,OAAQG,EAAMH,QACnDP,EAAcrB,GAAQW,KAAKsB,IAC1B,CAACF,EAAMJ,MAAOI,EAAMH,SAyBvB,OACE,oCACE,2BAAOQ,KAAK,SAASC,MAAON,EAAMF,OAAQS,SAXrB,SAACC,GAAD,OAAWP,EAAS,EAAD,GAAMD,EAAN,CAAaF,OAAQU,EAAMC,OAAOH,YAYzEN,EAAMD,SAAW,wBAAI3D,MAAO,CAAES,MAAO,UAApB,eAChBmD,EAAMD,SACR,yBAAK3D,MAAO,CACVC,QAAS,SACTqE,QAAS,OACTC,oBAAqB,iBACrBC,aAAc,UAGbZ,EAAML,WACJ1B,OApBU,SAAC4C,GAAD,OAAeA,EAAUpD,KAAKqD,cAC9CC,SAASf,EAAMF,OAAOgB,iBAoBhBE,IAlBe,SAACH,GAAD,OACtB,kBAAC,EAAD,CAAWxC,IAAKwC,EAAUI,QAAS9E,KAAM0E,OAoBvC,yBAAKzE,MAAO,CAAE8E,MAAO,SACnB,4BAAQb,KAAK,SAASc,QAzCP,WACnB,IAAMC,EAAiBpB,EAAMH,OAASG,EAAMJ,MACtCC,EAASuB,GAAkB,EAAIA,EAAiBpB,EAAMH,OAE5DI,EAAS,EAAD,GAAMD,EAAN,CAAaH,SAAQE,QADbqB,GAAkB,OAsC9B,YACA,4BAAQf,KAAK,SAASc,QAnCX,WACf,IAAME,EAAarB,EAAMH,OAASG,EAAMJ,MAClCC,EAASwB,EAAa,GAAKrB,EAAMH,OAASwB,EAEhDpB,EAAS,EAAD,GAAMD,EAAN,CAAaH,SAAQE,UADXsB,EAAa,SAgC3B,gB,MCzDOC,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvD,KAAK,SAAAwD,GACjCA,EAAaC,gB","file":"static/js/main.012d4a03.chunk.js","sourcesContent":["import React from 'react';\n\nconst Character = ({ info }) => (\n  <div style={{ padding: '5%', position: 'relative' }}>\n    <div style={{\n      float: 'right',\n      position: 'absolute',\n      right: '5%',\n      top: '6%',\n      zIndex: '10',\n      backgroundColor: info.status === 'Alive' ? 'green' : 'red',\n      padding: '5px',\n      color: 'white',\n    }}\n    >\n      {info.status}\n    </div>\n    <img\n      src={info.img}\n      alt={`img of ${info.nickname}`}\n      style={{\n        justifySelf: 'center',\n        height: '100%',\n        width: '100%',\n        objectFit: 'cover',\n      }}\n    />\n    <div style={{\n      float: 'left',\n      position: 'absolute',\n      left: '10%',\n      bottom: '5%',\n      zIndex: '10',\n      backgroundColor: 'transparent',\n      color: 'white',\n      textAlign: 'left',\n    }}\n    >\n      <h4>{info.name}</h4>\n      <p>\n        <span>&#8902;</span>\n        {info.birthday}\n      </p>\n      <p>{info.occupation.join(', ')}</p>\n    </div>\n  </div>\n);\n\nexport default Character;\n","export default class Requester {\n  constructor(baseUrl) {\n    this.baseUrl = baseUrl;\n    this.params = '';\n  }\n\n  setParams(filter) {\n    this.params = Object.keys(filter).reduce((params, key, index) => {\n      const symbol = index === 0 ? '?' : '&';\n      return `${params}${symbol}${key}=${filter[key]}`;\n    }, '');\n  }\n\n  get(endpoint) {\n    const serviceUrl = `${this.baseUrl}${endpoint}${this.params}`;\n    const configuration = { method: 'GET' };\n    return fetch(serviceUrl, configuration)\n      .then(async (response) => {\n        if (response.ok) {\n          return response.json()\n            .then((data) => [null, data])\n            .catch((error) => [error]);\n        }\n        return [new Error(response.statusText)];\n      });\n  }\n}\n\nexport const requester = new Requester('https://www.breakingbadapi.com/api/');\n","import { requester } from '../Services/Requester';\n\nconst endpoint = 'characters';\n\nexport const getCharacters = async (filter = {}) => {\n  requester.setParams(filter);\n  const [error, data] = await requester.get(endpoint);\n  if (error) {\n    return [];\n  }\n  return data;\n};\n\nexport const getCharacterById = async (id = '') => {\n  requester.setParams({});\n  const endpointWithId = `${endpoint}/${id}`;\n  const [error, data] = await requester.get(endpointWithId);\n  if (error) {\n    return {};\n  }\n  return data[0];\n};\n","import React, { useState, useEffect } from 'react';\nimport Character from '../Components/Character';\nimport { getCharacters } from '../Controllers/characters';\n\nconst ListCharacters = () => {\n  const [state, setState] = useState({\n    characters: [],\n    limit: 8,\n    offset: 0,\n    search: '',\n    loading: true,\n  });\n\n  const updateCharacters = (characters) => {\n    setState((innerState) => ({ ...innerState, characters, loading: false }));\n  };\n\n  useEffect(() => {\n    const initialFilter = { limit: 8, offset: 0 };\n    getCharacters(initialFilter).then(updateCharacters);\n  }, []);\n\n  useEffect(() => {\n    const filter = { limit: state.limit, offset: state.offset };\n    getCharacters(filter).then(updateCharacters);\n  }, [state.limit, state.offset]);\n\n  const previousPage = () => {\n    const previousOffset = state.offset - state.limit;\n    const offset = previousOffset > -1 ? previousOffset : state.offset;\n    const loading = previousOffset > -1;\n    setState({ ...state, offset, loading });\n  };\n\n  const nextPage = () => {\n    const nextOffset = state.offset + state.limit;\n    const offset = nextOffset > 57 ? state.offset : nextOffset;\n    const loading = !(nextOffset > 57);\n    setState({ ...state, offset, loading });\n  };\n\n  const handleSearchName = (event) => setState({ ...state, search: event.target.value });\n\n  const nameSearch = (character) => character.name.toLowerCase()\n    .includes(state.search.toLowerCase());\n\n  const renderCharacter = (character) => (\n    <Character key={character.char_id} info={character} />\n  );\n\n  return (\n    <>\n      <input type=\"search\" value={state.search} onChange={handleSearchName} />\n      {state.loading && <h1 style={{ color: 'white' }}>Loading...</h1>}\n      {!state.loading && (\n      <div style={{\n        padding: '2% 10%',\n        display: 'grid',\n        gridTemplateColumns: 'repeat(4, 25%)',\n        gridAutoRows: '350px',\n      }}\n      >\n        {state.characters\n          .filter(nameSearch)\n          .map(renderCharacter)}\n      </div>\n      )}\n      <div style={{ clear: 'left' }}>\n        <button type=\"button\" onClick={previousPage}>Anterior</button>\n        <button type=\"button\" onClick={nextPage}>Posterior</button>\n      </div>\n    </>\n  );\n};\n\nexport default ListCharacters;\n","import React from 'react';\nimport ListCharacters from './Screens/ListCharacters';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ListCharacters />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}